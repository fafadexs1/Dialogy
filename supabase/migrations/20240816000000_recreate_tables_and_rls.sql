-- supabase/migrations/YYYYMMDDHHMMSS_workspace_collaboration_system.sql

-- Initial cleanup
BEGIN;

-- =============================================
-- SECTION 1: Drop Existing Objects
-- Drop policies, triggers, and tables in the correct order to avoid dependency errors.
-- =============================================

-- Drop policies first to remove dependencies on tables
DROP POLICY IF EXISTS "Users can read their own data" ON public.users;
DROP POLICY IF EXISTS "Users can update their own data" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to read users table" ON public.users;
DROP POLICY IF EXISTS "Users can access contacts of workspaces they are part of" ON public.contacts;
DROP POLICY IF EXISTS "Users can access chats of workspaces they are part of" ON public.chats;
DROP POLICY IF EXISTS "Users can access messages of workspaces they are part of" ON public.messages;
DROP POLICY IF EXISTS "Users can access API configs of workspaces they are part of" ON public.evolution_api_configs;
DROP POLICY IF EXISTS "Users can access API instances of workspaces they are part of" ON public.evolution_api_instances;
DROP POLICY IF EXISTS "Users can view workspaces they are a member of" ON public.workspaces;
DROP POLICY IF EXISTS "Authenticated users can create workspaces" ON public.workspaces;
DROP POLICY IF EXISTS "Owners can update their own workspaces" ON public.workspaces;
DROP POLICY IF EXISTS "Owners can delete their own workspaces" ON public.workspaces;
DROP POLICY IF EXISTS "Users can insert themselves into workspaces" ON public.user_workspaces;
DROP POLICY IF EXISTS "Users can view their own workspace memberships" ON public.user_workspaces;
DROP POLICY IF EXISTS "Users can delete their own or be deleted by owner" ON public.user_workspaces;

-- Break the circular dependency between users and workspaces before dropping tables
ALTER TABLE public.users DROP CONSTRAINT IF EXISTS fk_last_active_workspace;

-- Drop triggers before dropping the functions they depend on
DROP TRIGGER IF EXISTS on_new_user_created ON auth.users;
DROP TRIGGER IF EXISTS set_workspace_owner_trigger ON public.workspaces;
DROP TRIGGER IF EXISTS add_creator_to_workspace_trigger ON public.workspaces;

-- Drop functions
DROP FUNCTION IF EXISTS public.handle_new_user();
DROP FUNCTION IF EXISTS public.set_workspace_owner();
DROP FUNCTION IF EXISTS public.add_creator_to_workspace();

-- Drop tables in the correct dependency order
DROP TABLE IF EXISTS public.user_workspaces;
DROP TABLE IF EXISTS public.evolution_api_instances;
DROP TABLE IF EXISTS public.evolution_api_configs;
DROP TABLE IF EXISTS public.messages;
DROP TABLE IF EXISTS public.chats;
DROP TABLE IF EXISTS public.contacts;
DROP TABLE IF EXISTS public.workspaces;
DROP TABLE IF EXISTS public.users;

-- =============================================
-- SECTION 2: Create Tables
-- Define the schema for the workspace collaboration system.
-- =============================================

-- Users Table: Stores user profile information, linking to auth.users.
CREATE TABLE public.users (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  email TEXT UNIQUE,
  last_active_workspace_id UUID
);

-- Workspaces Table: Represents a workspace, owned by a user.
CREATE TABLE public.workspaces (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  name TEXT NOT NULL,
  avatar_url TEXT,
  owner_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE
);

-- Establish the foreign key for last_active_workspace_id after workspaces is created
ALTER TABLE public.users
ADD CONSTRAINT fk_last_active_workspace
FOREIGN KEY (last_active_workspace_id)
REFERENCES public.workspaces(id) ON DELETE SET NULL;

-- User-Workspaces Junction Table: Manages user membership in workspaces.
CREATE TABLE public.user_workspaces (
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  workspace_id UUID NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  PRIMARY KEY (user_id, workspace_id)
);

-- Contacts Table
CREATE TABLE public.contacts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workspace_id UUID NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    name TEXT NOT NULL,
    avatar_url TEXT,
    email TEXT,
    phone TEXT,
    business_profile JSONB
);

-- Chats Table
CREATE TABLE public.chats (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workspace_id UUID NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    contact_id UUID NOT NULL REFERENCES public.contacts(id) ON DELETE CASCADE,
    agent_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    status TEXT NOT NULL DEFAULT 'gerais'
);

-- Messages Table
CREATE TABLE public.messages (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    chat_id UUID NOT NULL REFERENCES public.chats(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    sender_id UUID NOT NULL, -- Can be a user or a contact ID
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


-- Evolution API Configs Table
CREATE TABLE public.evolution_api_configs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workspace_id UUID NOT NULL UNIQUE REFERENCES public.workspaces(id) ON DELETE CASCADE,
    api_url TEXT,
    api_key TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Evolution API Instances Table
CREATE TABLE public.evolution_api_instances (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    config_id UUID NOT NULL REFERENCES public.evolution_api_configs(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    type TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);


-- =============================================
-- SECTION 3: Workspace Ownership and Membership Management (Functions & Triggers)
-- Automate user profile creation and workspace setup.
-- =============================================

-- Function to create a user profile when a new user signs up in auth.users
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.users (id, full_name, email, avatar_url)
  VALUES (new.id, new.raw_user_meta_data->>'full_name', new.email, new.raw_user_meta_data->>'avatar_url');
  RETURN new;
END;
$$;

-- Trigger to execute handle_new_user on new user creation
CREATE TRIGGER on_new_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to set the owner_id of a new workspace to the creator's ID
CREATE OR REPLACE FUNCTION public.set_workspace_owner()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  new.owner_id := auth.uid();
  RETURN new;
END;
$$;

-- Trigger to set the workspace owner before inserting a new workspace
CREATE TRIGGER set_workspace_owner_trigger
  BEFORE INSERT ON public.workspaces
  FOR EACH ROW EXECUTE FUNCTION public.set_workspace_owner();


-- Function to automatically add the creator of a workspace to the user_workspaces table
CREATE OR REPLACE FUNCTION public.add_creator_to_workspace()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  INSERT INTO public.user_workspaces (user_id, workspace_id)
  VALUES (new.owner_id, new.id);
  RETURN new;
END;
$$;

-- Trigger to add the creator to the workspace after it's created
CREATE TRIGGER add_creator_to_workspace_trigger
  AFTER INSERT ON public.workspaces
  FOR EACH ROW EXECUTE FUNCTION public.add_creator_to_workspace();


-- =============================================
-- SECTION 4: Workspace Access Control System (Row-Level Security Policies)
-- Define access rules for all tables.
-- =============================================

-- Enable RLS for all relevant tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.evolution_api_configs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.evolution_api_instances ENABLE ROW LEVEL SECURITY;

-- Policies for 'users' table
CREATE POLICY "Users can read their own data" ON public.users FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own data" ON public.users FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow authenticated users to read users table" ON public.users FOR SELECT TO authenticated USING (true);


-- Policies for 'workspaces' table
CREATE POLICY "Users can view workspaces they are a member of" ON public.workspaces FOR SELECT USING (id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));
CREATE POLICY "Authenticated users can create workspaces" ON public.workspaces FOR INSERT WITH CHECK (true);
CREATE POLICY "Owners can update their own workspaces" ON public.workspaces FOR UPDATE USING (owner_id = auth.uid()) WITH CHECK (owner_id = auth.uid());
CREATE POLICY "Owners can delete their own workspaces" ON public.workspaces FOR DELETE USING (owner_id = auth.uid());

-- Policies for 'user_workspaces' table
CREATE POLICY "Users can view their own workspace memberships" ON public.user_workspaces FOR SELECT USING (user_id = auth.uid());
CREATE POLICY "Users can add themselves to workspaces" ON public.user_workspaces FOR INSERT WITH CHECK (user_id = auth.uid());
CREATE POLICY "Users can delete their own or be deleted by owner" ON public.user_workspaces FOR DELETE USING (user_id = auth.uid() OR (SELECT owner_id FROM workspaces WHERE id = user_workspaces.workspace_id) = auth.uid());

-- Policies for related tables (contacts, chats, messages, etc.)
CREATE POLICY "Users can access data in workspaces they are part of" ON public.contacts FOR ALL USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));
CREATE POLICY "Users can access data in workspaces they are part of" ON public.chats FOR ALL USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));
CREATE POLICY "Users can access data in workspaces they are part of" ON public.messages FOR ALL USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));
CREATE POLICY "Users can access data in workspaces they are part of" ON public.evolution_api_configs FOR ALL USING (workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid()));
CREATE POLICY "Users can access API instances in their workspaces" ON public.evolution_api_instances FOR ALL USING (config_id IN (SELECT id FROM evolution_api_configs WHERE workspace_id IN (SELECT workspace_id FROM user_workspaces WHERE user_id = auth.uid())));


COMMIT;
