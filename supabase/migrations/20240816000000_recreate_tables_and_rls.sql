
-- Full database schema reset and re-creation
-- This script is designed to be idempotent and handle the complete teardown and setup of the application's tables,
-- row-level security (RLS) policies, and database functions/triggers.

-- 1. Workspace Security Policy Cleanup
-- Drop all RLS policies first to remove inter-table dependencies before dropping tables.
ALTER TABLE public.users DROP CONSTRAINT IF EXISTS fk_last_active_workspace;
DROP POLICY IF EXISTS "Allow authenticated users to read users table" ON public.users;
DROP POLICY IF EXISTS "Allow individual user access to their own data" ON public.users;
DROP POLICY IF EXISTS "Users can view workspaces they are a member of" ON public.workspaces;
DROP POLICY IF EXISTS "Owners can update their own workspaces" ON public.workspaces;
DROP POLICY IF EXISTS "Owners can delete their own workspaces" ON public.workspaces;
DROP POLICY IF EXISTS "Enable read access for user's own associations" ON public.user_workspaces;
DROP POLICY IF EXISTS "Allow full access to workspace data" ON public.contacts;
DROP POLICY IF EXISTS "Allow full access to workspace data" ON public.chats;
DROP POLICY IF EXISTS "Allow full access to workspace data" ON public.messages;
DROP POLICY IF EXISTS "Allow full access to workspace data" ON public.evolution_api_configs;
DROP POLICY IF EXISTS "Allow full access based on parent config" ON public.evolution_api_instances;

-- 2. Drop Dependent Triggers and Functions
DROP TRIGGER IF EXISTS on_user_created ON public.users;
DROP FUNCTION IF EXISTS public.create_user_profile;
DROP TRIGGER IF EXISTS on_workspace_created ON public.workspaces;
DROP FUNCTION IF EXISTS public.set_workspace_owner;
DROP TRIGGER IF EXISTS add_creator_to_workspace_trigger ON public.workspaces;
DROP FUNCTION IF EXISTS public.add_creator_to_workspace;

-- 3. Table Teardown
-- Drop tables in the correct order to respect foreign key constraints.
DROP TABLE IF EXISTS public.evolution_api_instances;
DROP TABLE IF EXISTS public.evolution_api_configs;
DROP TABLE IF EXISTS public.messages;
DROP TABLE IF EXISTS public.chats;
DROP TABLE IF EXISTS public.contacts;
DROP TABLE IF EXISTS public.user_workspaces;
DROP TABLE IF EXISTS public.workspaces;
DROP TABLE IF EXISTS public.users;


-- 4. Workspace Collaboration System Schema
-- Recreate all tables with the correct schema and constraints.

-- Users Table
CREATE TABLE public.users (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    full_name text,
    avatar_url text,
    email text UNIQUE,
    last_active_workspace_id uuid
);
COMMENT ON TABLE public.users IS 'Stores user profile information, extending the auth.users table.';

-- Workspaces Table
CREATE TABLE public.workspaces (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    name text NOT NULL,
    avatar_url text,
    owner_id uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.workspaces IS 'Stores information about different workspaces created by users.';

-- Add Foreign Key constraint back to users table for last_active_workspace_id
ALTER TABLE public.users 
ADD CONSTRAINT fk_last_active_workspace FOREIGN KEY (last_active_workspace_id) 
REFERENCES public.workspaces(id) ON DELETE SET NULL;

-- User-Workspaces Junction Table
CREATE TABLE public.user_workspaces (
    user_id uuid NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, workspace_id)
);
COMMENT ON TABLE public.user_workspaces IS 'Junction table to manage user membership in workspaces.';

-- Contacts Table
CREATE TABLE public.contacts (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    name text NOT NULL,
    email text,
    phone text,
    avatar_url text
);
COMMENT ON TABLE public.contacts IS 'Stores contact information, scoped to a specific workspace.';

-- Chats Table
CREATE TABLE public.chats (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    contact_id uuid NOT NULL REFERENCES public.contacts(id) ON DELETE CASCADE,
    agent_id uuid REFERENCES public.users(id) ON DELETE SET NULL,
    status text NOT NULL DEFAULT 'gerais'
);
COMMENT ON TABLE public.chats IS 'Represents a conversation thread, scoped to a workspace.';

-- Messages Table
CREATE TABLE public.messages (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_id uuid NOT NULL REFERENCES public.chats(id) ON DELETE CASCADE,
    workspace_id uuid NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
    sender_id uuid NOT NULL, -- Cannot be a FK as it can reference users or contacts table
    content text,
    created_at timestamp with time zone NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.messages IS 'Stores individual messages within a chat, scoped to a workspace.';

-- Evolution API Configs Table
CREATE TABLE public.evolution_api_configs (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    workspace_id uuid NOT NULL UNIQUE REFERENCES public.workspaces(id) ON DELETE CASCADE,
    api_url text,
    api_key text
);
COMMENT ON TABLE public.evolution_api_configs IS 'Stores Evolution API global configurations for a workspace.';

-- Evolution API Instances Table
CREATE TABLE public.evolution_api_instances (
    id uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    config_id uuid NOT NULL REFERENCES public.evolution_api_configs(id) ON DELETE CASCADE,
    name text NOT NULL,
    type text NOT NULL
);
COMMENT ON TABLE public.evolution_api_instances IS 'Stores individual Evolution API instances linked to a configuration.';


-- 5. Workspace Ownership and Membership Management (Functions & Triggers)

-- Function to create a user profile upon new user signup in auth.users
CREATE OR REPLACE FUNCTION public.create_user_profile()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.users (id, full_name, avatar_url, email)
  VALUES (
    NEW.id,
    NEW.raw_user_meta_data->>'full_name',
    NEW.raw_user_meta_data->>'avatar_url',
    NEW.email
  );
  RETURN NEW;
END;
$$;

-- Trigger to execute the profile creation function
CREATE TRIGGER on_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.create_user_profile();

-- Function to set the owner_id of a new workspace to the creator
CREATE OR REPLACE FUNCTION public.set_workspace_owner()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.workspaces
  SET owner_id = auth.uid()
  WHERE id = NEW.id;
  RETURN NEW;
END;
$$;

-- Trigger to set the workspace owner
CREATE TRIGGER on_workspace_created
  AFTER INSERT ON public.workspaces
  FOR EACH ROW EXECUTE FUNCTION public.set_workspace_owner();

-- Function to add the workspace creator to the user_workspaces table
CREATE OR REPLACE FUNCTION public.add_creator_to_workspace()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  INSERT INTO public.user_workspaces (user_id, workspace_id)
  VALUES (auth.uid(), NEW.id);
  RETURN NEW;
END;
$$;

-- Trigger to add the creator to the workspace members
CREATE TRIGGER add_creator_to_workspace_trigger
  AFTER INSERT ON public.workspaces
  FOR EACH ROW EXECUTE FUNCTION public.add_creator_to_workspace();


-- 6. Workspace Access Control System (RLS Policies)

-- Enable RLS on all tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.evolution_api_configs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.evolution_api_instances ENABLE ROW LEVEL SECURITY;

-- Policies for 'users' table
CREATE POLICY "Allow individual user access to their own data" ON public.users FOR SELECT USING (auth.uid() = id);

-- Policies for 'workspaces' table
CREATE POLICY "Users can view workspaces they are a member of" ON public.workspaces FOR SELECT USING (
  EXISTS (
    SELECT 1
    FROM public.user_workspaces
    WHERE user_workspaces.workspace_id = workspaces.id AND user_workspaces.user_id = auth.uid()
  )
);
CREATE POLICY "Users can create their own workspaces" ON public.workspaces FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);
CREATE POLICY "Owners can update their own workspaces" ON public.workspaces FOR UPDATE USING (auth.uid() = owner_id);
CREATE POLICY "Owners can delete their own workspaces" ON public.workspaces FOR DELETE USING (auth.uid() = owner_id);

-- Policies for 'user_workspaces' table
CREATE POLICY "Enable read access for user's own associations" ON public.user_workspaces FOR SELECT USING (auth.uid() = user_id);

-- Helper function to check workspace membership
CREATE OR REPLACE FUNCTION public.is_workspace_member(p_workspace_id uuid)
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_workspaces
    WHERE workspace_id = p_workspace_id AND user_id = auth.uid()
  );
$$;

-- Policies for workspace-scoped tables (Contacts, Chats, Messages, etc.)
CREATE POLICY "Allow full access to workspace data" ON public.contacts FOR ALL
USING (public.is_workspace_member(workspace_id))
WITH CHECK (public.is_workspace_member(workspace_id));

CREATE POLICY "Allow full access to workspace data" ON public.chats FOR ALL
USING (public.is_workspace_member(workspace_id))
WITH CHECK (public.is_workspace_member(workspace_id));

CREATE POLICY "Allow full access to workspace data" ON public.messages FOR ALL
USING (public.is_workspace_member(workspace_id))
WITH CHECK (public.is_workspace_member(workspace_id));

CREATE POLICY "Allow full access to workspace data" ON public.evolution_api_configs FOR ALL
USING (public.is_workspace_member(workspace_id))
WITH CHECK (public.is_workspace_member(workspace_id));

CREATE POLICY "Allow full access based on parent config" ON public.evolution_api_instances FOR ALL
USING (
    EXISTS (
        SELECT 1 FROM public.evolution_api_configs c
        WHERE c.id = config_id AND public.is_workspace_member(c.workspace_id)
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM public.evolution_api_configs c
        WHERE c.id = config_id AND public.is_workspace_member(c.workspace_id)
    )
);

COMMIT;
