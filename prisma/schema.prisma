// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum ChatStatus {
  atendimentos
  gerais
  encerrados
}

enum MessageType {
  text
  system
  audio
}

enum MessageStatus {
  default
  deleted
}

enum ActivityType {
  ligacao
  email
  whatsapp
  visita
  viabilidade
  contrato
  agendamento
  tentativa_contato
  nota
}

enum CustomFieldType {
  text
  number
  date
  email
  tel
  select
}

enum ShortcutType {
  global
  private
}

enum CampaignStatus {
  draft
  sending
  completed
  paused
  failed
}

enum CampaignRecipientStatus {
  pending
  sent
  failed
}


// MODELS

model User {
  id                        String      @id @default(uuid())
  fullName                  String      @map("full_name")
  avatarUrl                 String?     @map("avatar_url")
  email                     String      @unique
  passwordHash              String      @map("password_hash")
  lastActiveWorkspaceId     String?     @map("last_active_workspace_id")
  online                    Boolean?    @default(false)
  onlineSince               DateTime?   @map("online_since")

  ownedWorkspaces         Workspace[]           @relation("WorkspaceOwner")
  userWorkspaceRoles      UserWorkspaceRole[]
  ownedInvites            WorkspaceInvite[]
  usedInvites             UserInvite[]
  ownedContacts           Contact[]
  activities              Activity[]
  teamMemberships         TeamMember[]
  createdCampaigns        Campaign[]
  createdSystemAgents     SystemAgent[]         @relation("AgentCreator") // Assuming this relation might be useful
  shortcuts               Shortcut[]
  assignedChats           Chat[]
  sentMessages            Message[]
  
  @@map("users")
}

model Workspace {
  id                      String      @id @default(uuid())
  name                    String
  avatarUrl               String?     @map("avatar_url")
  ownerId                 String      @map("owner_id")
  
  owner                   User        @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  roles                   Role[]
  userWorkspaceRoles      UserWorkspaceRole[]
  invites                 WorkspaceInvite[]
  tags                    Tag[]
  teams                   Team[]
  contacts                Contact[]
  customFieldDefinitions  CustomFieldDefinition[]
  chats                   Chat[]
  messages                Message[]
  evolutionApiConfigs     EvolutionApiConfig[]
  autopilotConfigs        AutopilotConfig[]
  systemAgents            SystemAgent[]
  shortcuts               Shortcut[]
  campaigns               Campaign[]

  @@map("workspaces")
}

model Permission {
  id          String @id
  description String
  category    String

  roles RolePermission[]

  @@map("permissions")
}

model Role {
  id              String   @id @default(uuid())
  workspaceId     String   @map("workspace_id")
  name            String
  description     String?
  isDefault       Boolean? @default(false) @map("is_default")

  workspace         Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  permissions       RolePermission[]
  userWorkspaceRoles UserWorkspaceRole[]
  teams             Team[]

  @@unique([workspaceId, name])
  @@map("roles")
}

model RolePermission {
  roleId        String     @map("role_id")
  permissionId  String     @map("permission_id")

  role          Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserWorkspaceRole {
  userId      String   @map("user_id")
  workspaceId String   @map("workspace_id")
  roleId      String   @map("role_id")
  createdAt   DateTime @default(now()) @map("created_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, workspaceId])
  @@map("user_workspace_roles")
}


model WorkspaceInvite {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  code        String   @unique
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")
  maxUses     Int?     @map("max_uses")
  isRevoked   Boolean? @default(false) @map("is_revoked")
  useCount    Int?     @default(0) @map("use_count")
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  usedBy      UserInvite[]

  @@map("workspace_invites")
}

model UserInvite {
  inviteId String @map("invite_id")
  userId   String @map("user_id")
  usedAt   DateTime? @default(now()) @map("used_at")

  invite WorkspaceInvite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([inviteId, userId])
  @@map("user_invites")
}

model Tag {
  id              String  @id @default(uuid())
  workspaceId     String  @map("workspace_id")
  label           String
  value           String
  color           String
  isCloseReason   Boolean? @default(false) @map("is_close_reason")

  workspace       Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  contactTags     ContactTag[]
  team            Team?
  chatCloseReason Chat[]

  @@unique([workspaceId, label])
  @@map("tags")
}

model Team {
  id              String        @id @default(uuid())
  workspaceId     String        @map("workspace_id")
  roleId          String        @map("role_id")
  name            String
  color           String?       @default("#3b82f6")
  tagId           String?       @unique @map("tag_id")

  workspace       Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role            Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  tag             Tag?          @relation(fields: [tagId], references: [id], onDelete: SetNull)
  members         TeamMember[]
  businessHours   BusinessHour[]

  @@unique([workspaceId, name])
  @@map("teams")
}

model TeamMember {
  teamId  String @map("team_id")
  userId  String @map("user_id")

  team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("team_members")
}

model BusinessHour {
  id        String   @id @default(uuid())
  teamId    String   @map("team_id")
  dayOfWeek String   @map("day_of_week")
  isEnabled Boolean? @default(true)
  startTime DateTime? @map("start_time") @db.Time
  endTime   DateTime? @map("end_time") @db.Time

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, dayOfWeek])
  @@map("business_hours")
}

model Contact {
  id                String      @id @default(uuid())
  workspaceId       String      @map("workspace_id")
  name              String
  avatarUrl         String?     @map("avatar_url")
  email             String?
  phone             String?
  phoneNumberJid    String?     @map("phone_number_jid")
  address           String?
  ownerId           String?     @map("owner_id")
  createdAt         DateTime    @default(now()) @map("created_at")

  workspace           Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  owner               User?       @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  activities          Activity[]
  contactTags         ContactTag[]
  customFieldValues   ContactCustomFieldValue[]
  chats               Chat[]
  campaignRecipients  CampaignRecipient[]

  @@unique([workspaceId, phoneNumberJid])
  @@map("contacts")
}

model Activity {
  id        String       @id @default(uuid())
  contactId String       @map("contact_id")
  userId    String?      @map("user_id")
  type      ActivityType
  notes     String?
  date      DateTime     @default(now())
  createdAt DateTime     @default(now()) @map("created_at")

  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("activities")
}

model ContactTag {
  contactId String @map("contact_id")
  tagId     String @map("tag_id")
  
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
  @@map("contact_tags")
}

model CustomFieldDefinition {
  id          String      @id @default(uuid())
  workspaceId String      @map("workspace_id")
  label       String
  type        CustomFieldType
  placeholder String?
  options     Json?

  workspace         Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  contactFieldValues ContactCustomFieldValue[]

  @@unique([workspaceId, label])
  @@map("custom_field_definitions")
}

model ContactCustomFieldValue {
  contactId String @map("contact_id")
  fieldId   String @map("field_id")
  value     String

  contact   Contact                 @relation(fields: [contactId], references: [id], onDelete: Cascade)
  field     CustomFieldDefinition   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  
  @@id([contactId, fieldId])
  @@map("contact_custom_field_values")
}

model Chat {
  id              String      @id @default(uuid())
  workspaceId     String      @map("workspace_id")
  contactId       String      @map("contact_id")
  agentId         String?     @map("agent_id")
  status          ChatStatus? @default(gerais)
  createdAt       DateTime    @default(now()) @map("created_at")
  assignedAt      DateTime?   @map("assigned_at")
  closedAt        DateTime?   @map("closed_at")
  closeReasonTagId String?     @map("close_reason_tag_id")
  closeNotes      String?     @map("close_notes")
  tag             String?
  color           String?

  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  agent           User?     @relation(fields: [agentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  closeReasonTag  Tag?      @relation(fields: [closeReasonTagId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages        Message[]

  @@map("chats")
}

model Message {
  id                String         @id @default(uuid())
  workspaceId       String         @map("workspace_id")
  chatId            String         @map("chat_id")
  senderId          String?        @map("sender_id")
  type              MessageType?   @default(text)
  status            MessageStatus? @default(default)
  content           String?
  metadata          Json?
  createdAt         DateTime       @default(now()) @map("created_at")
  messageIdFromApi  String?        @map("message_id_from_api")
  senderFromApi     String?        @map("sender_from_api")
  instanceName      String?        @map("instance_name")
  statusFromApi     String?        @map("status_from_api")
  sourceFromApi     String?        @map("source_from_api")
  serverUrl         String?        @map("server_url")
  fromMe            Boolean?       @map("from_me")
  apiMessageStatus  String?        @map("api_message_status")
  isRead            Boolean?       @default(false) @map("is_read")
  rawPayload        Json?          @map("raw_payload")

  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  chat            Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender          User?     @relation(fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("messages")
}

model EvolutionApiConfig {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  apiUrl      String?  @map("api_url")
  apiKey      String?  @map("api_key")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  instances   EvolutionApiInstance[]

  @@map("evolution_api_configs")
}

model EvolutionApiInstance {
  id          String  @id @default(uuid())
  configId    String  @map("config_id")
  name        String
  type        String?
  webhookUrl  String? @map("webhook_url")

  config      EvolutionApiConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@map("evolution_api_instances")
}

model AutopilotConfig {
  id             String   @id @default(uuid())
  workspaceId    String   @map("workspace_id")
  userId         String   @map("user_id")
  geminiApiKey   String?  @map("gemini_api_key")
  aiModel        String?  @map("ai_model")
  knowledgeBase  String?  @map("knowledge_base")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  rules           AutopilotRule[]
  usageLogs       AutopilotUsageLog[]

  @@unique([workspaceId, userId])
  @@map("autopilot_configs")
}

model AutopilotRule {
  id        String @id @default(uuid())
  configId  String @map("config_id")
  name      String
  trigger   String
  action    Json
  enabled   Boolean? @default(true)

  config    AutopilotConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@map("autopilot_rules")
}

model AutopilotUsageLog {
  id           String   @id @default(uuid())
  configId     String   @map("config_id")
  ruleName     String?  @map("rule_name")
  flowName     String   @map("flow_name")
  modelName    String   @map("model_name")
  inputTokens  Int      @map("input_tokens")
  outputTokens Int      @map("output_tokens")
  totalTokens  Int      @map("total_tokens")
  createdAt    DateTime @default(now()) @map("created_at")

  config       AutopilotConfig @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@map("autopilot_usage_logs")
}

model SystemAgent {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  name        String
  avatarUrl   String?  @map("avatar_url")
  token       String   @unique
  webhookUrl  String?  @map("webhook_url")
  isActive    Boolean? @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  // Placeholder for creator if needed
  // creator     User      @relation("AgentCreator", fields: [createdBy], references: [id])
  // createdBy   String
  
  @@unique([workspaceId, name])
  @@map("system_agents")
}

model Shortcut {
  id          String   @id @default(uuid())
  workspaceId String   @map("workspace_id")
  userId      String   @map("user_id")
  name        String
  message     String
  type        ShortcutType @default(private)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceId, name])
  @@map("shortcuts")
}

model Campaign {
  id            String   @id @default(uuid())
  workspaceId   String   @map("workspace_id")
  createdById   String?  @map("created_by_id")
  name          String
  message       String
  instanceName  String   @map("instance_name")
  status        CampaignStatus @default(draft)
  createdAt     DateTime @default(now()) @map("created_at")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  creator     User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
  recipients  CampaignRecipient[]

  @@map("campaigns")
}

model CampaignRecipient {
  id            String                  @id @default(uuid())
  campaignId    String                  @map("campaign_id")
  contactId     String                  @map("contact_id")
  status        CampaignRecipientStatus @default(pending)
  sentAt        DateTime?               @map("sent_at")
  errorMessage  String?                 @map("error_message")

  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contactId])
  @@map("campaign_recipients")
}
